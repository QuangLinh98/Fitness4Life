import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../../core/widgets/LanguageProvider.dart';
import '../../../../user/service/UserInfoProvider.dart';
import '../../../data/models/promotion/Point.dart';
import '../../../service/PromotionService.dart';
import 'RewardDetailPage.dart';

class PromotionScreen extends StatefulWidget {

  @override
  _PromotionScreenState createState() => _PromotionScreenState();
}

class _PromotionScreenState extends State<PromotionScreen>
    with SingleTickerProviderStateMixin {
    late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      fetchUserPromotions();
      fetchPromotionJson();
    });
  }
  Future<void> fetchUserPromotions() async {
    final userInfo = Provider.of<UserInfoProvider>(context, listen: false);
    final promotionService = Provider.of<PromotionService>(context, listen: false);
    await promotionService.getPromotionOfUserById(userInfo.userId!);
    Point? point = await promotionService.fetchPoint(userInfo.userId!);
    userInfo.setUserPoint(point!.totalPoints);
  }
  void fetchPromotionJson() {
    final promotionService = Provider.of<PromotionService>(context, listen: false);
    promotionService.fetchPromotionInJson();
  }
    void _navigateToDetailPage(String promotionId, String title, String points, String imageUrl, int point) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => RewardDetailPage(
            promotionId: promotionId,
            title: title,
            points: points,
            imageUrl: imageUrl,
            point: point,
          ),
        ),
      );
    }

    @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(100),
        child: Column(
          children: [
            Container(
              decoration: BoxDecoration(
                color: const Color(0xFFB00020),
                borderRadius: BorderRadius.vertical(bottom: Radius.circular(15)),
              ),

              child: SafeArea(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    IconButton(
                      icon: Icon(Icons.arrow_back, color: Colors.white),
                      onPressed: () {
                        Navigator.pop(context);
                      },
                    ),

                    Expanded(
                      child: Center(
                        child: Text(
                          "Exclusive Deals & Rewards",
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 48),
                  ],
                ),
              ),
            ),
            TabBar(
              indicatorColor: const Color(0xFFB00020),
              labelColor: Colors.black,
              unselectedLabelColor: Colors.grey,
              controller: _tabController,
              tabs: [
                Tab(text: "Introduction"),
                Tab(text: "Your Coupons"),
                Tab(text: "Redeem Points"),
              ],
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Consumer<UserInfoProvider>(
              builder: (context, userInfo, child) {
                return Consumer<PromotionService>(
                  builder: (context, promotionService, child) {
                    return promotionService.isLoading
                        ? const CircularProgressIndicator()
                        : Text(
                      "Your Points: ${userInfo.userPoint}",
                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    );
                  },
                );
              },
            ),
          ),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildIntroductionTab("Introduction", _tabController),
                _buildYourCouponsTab(),
                _buildRedeemPointsTab("Redeem Points"),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildIntroductionTab(String tabName, TabController tabController) {
    if (tabName == "Introduction") {
      final isVietnamese = Provider.of<LanguageProvider>(context).isVietnamese;
      return SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Ti√™u ƒë·ªÅ ch√≠nh
            Text(
              isVietnamese
                  ? "Tham gia ch∆∞∆°ng tr√¨nh t√≠ch ƒëi·ªÉm - Nh·∫≠n th∆∞·ªüng h·∫•p d·∫´n!"
                  : "Join the Points Program - Earn Exciting Rewards!",
              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            Text(
              isVietnamese
                  ? "B·∫°n c√≥ th·ªÉ t√≠ch ƒëi·ªÉm b·∫±ng c√°ch ho√†n th√†nh c√°c th·ª≠ th√°ch t·∫≠p luy·ªán h√†ng ng√†y v√† h√†ng tu·∫ßn. ƒêi·ªÉm t√≠ch l≈©y c√≥ th·ªÉ ƒë·ªïi th√†nh m√£ gi·∫£m gi√°, qu√† t·∫∑ng ho·∫∑c c√°c bu·ªïi t·∫≠p mi·ªÖn ph√≠!"
                  : "Earn points by completing daily and weekly workout challenges. Redeem your points for discount vouchers, gifts, and free training sessions!",
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 10),

            // H√¨nh ·∫£nh minh h·ªça
            CachedNetworkImage(
              imageUrl: "https://images.pexels.com/photos/4168092/pexels-photo-4168092.jpeg",
              height: 200,
              width: double.infinity,
              fit: BoxFit.cover,
            ),
            const SizedBox(height: 20),

            // C√°ch th·ª©c tham gia
            Text(
              isVietnamese ? "C√°ch th·ª©c tham gia:" : "How to Join:",
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            _buildStep(isVietnamese
                ? "‚úÖ Ho√†n th√†nh c√°c b√†i t·∫≠p h√†ng ng√†y ƒë·ªÉ nh·∫≠n ƒëi·ªÉm."
                : "‚úÖ Complete daily workouts to earn points."),
            _buildStep(isVietnamese
                ? "üèÜ Tham gia th·ª≠ th√°ch h√†ng tu·∫ßn ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng l·ªõn."
                : "üèÜ Join weekly challenges for bigger rewards."),
            _buildStep(isVietnamese
                ? "üéÅ S·ª≠ d·ª•ng ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi m√£ gi·∫£m gi√°, kh√≥a t·∫≠p th·ª≠ v√† qu√† t·∫∑ng ƒë·∫∑c bi·ªát."
                : "üéÅ Redeem points for discount vouchers, trial classes, and special gifts."),
            const SizedBox(height: 20),

            // C√°c lo·∫°i th·ª≠ th√°ch
            Text(
              isVietnamese ? "C√°c lo·∫°i th·ª≠ th√°ch:" : "Types of Challenges:",
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            _buildStep(isVietnamese
                ? "üî• Th·ª≠ th√°ch 7 ng√†y: Ho√†n th√†nh √≠t nh·∫•t 30 ph√∫t t·∫≠p luy·ªán m·ªói ng√†y trong 7 ng√†y li√™n ti·∫øp."
                : "üî• 7-Day Challenge: Complete at least 30 minutes of workout daily for 7 consecutive days."),
            _buildStep(isVietnamese
                ? "üí™ Th·ª≠ th√°ch s·ª©c m·∫°nh: N√¢ng t·ªïng t·∫° 500kg trong 1 tu·∫ßn."
                : "üí™ Strength Challenge: Lift a total of 500kg in a week."),
            _buildStep(isVietnamese
                ? "üèÉ‚Äç‚ôÇÔ∏è Th·ª≠ th√°ch Cardio: Ch·∫°y b·ªô t·ªïng c·ªông 15km trong tu·∫ßn."
                : "üèÉ‚Äç‚ôÇÔ∏è Cardio Challenge: Run a total of 15km in a week."),
            const SizedBox(height: 20),

            // Danh s√°ch ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n
            Text(
              isVietnamese ? "C√°c ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n:" : "Exciting Rewards:",
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),

            _buildRewardList(isVietnamese),

            const SizedBox(height: 20),

            // C√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ)
            Text(
              isVietnamese ? "C√¢u h·ªèi th∆∞·ªùng g·∫∑p:" : "Frequently Asked Questions:",
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            _buildStep(isVietnamese
                ? "‚ùì T√¥i c√≥ th·ªÉ ƒë·ªïi ƒëi·ªÉm sang ti·ªÅn m·∫∑t kh√¥ng? ‚Üí Kh√¥ng, ƒëi·ªÉm ch·ªâ d√πng ƒë·ªÉ ƒë·ªïi qu√†."
                : "‚ùì Can I convert points into cash? ‚Üí No, points can only be redeemed for rewards."),
            _buildStep(isVietnamese
                ? "‚ùì ƒêi·ªÉm c√≥ h·∫øt h·∫°n kh√¥ng? ‚Üí ƒêi·ªÉm s·∫Ω h·∫øt h·∫°n sau 6 th√°ng n·∫øu kh√¥ng s·ª≠ d·ª•ng."
                : "‚ùì Do points expire? ‚Üí Yes, points expire after 6 months if not used."),
            _buildStep(isVietnamese
                ? "‚ùì T√¥i c√≥ th·ªÉ t√≠ch ƒëi·ªÉm b·∫±ng c√°ch n√†o kh√°c? ‚Üí B·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu b·∫°n b√® ƒë·ªÉ nh·∫≠n th√™m ƒëi·ªÉm th∆∞·ªüng!"
                : "‚ùì How else can I earn points? ‚Üí You can refer friends to earn bonus points!"),
            const SizedBox(height: 20),

            // N√∫t k√™u g·ªçi h√†nh ƒë·ªông
            Center(
              child: ElevatedButton(
                onPressed: () {
                  tabController.index = 2;
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.redAccent,
                  padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                ),
                child: Text(
                  isVietnamese ? "B·∫Øt ƒë·∫ßu t√≠ch ƒëi·ªÉm ngay" : "Start earning points now",
                  style: const TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      );
    } else {
      return Center(
        child: Text(
          "Danh m·ª•c $tabName ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
      );
    }
  }

  Widget _buildStep(String stepText) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Icon(Icons.check_circle, color: Colors.green, size: 20),
          const SizedBox(width: 10),
          Expanded(child: Text(stepText, style: const TextStyle(fontSize: 14))),
        ],
      ),
    );
  }
    List<Map<String, dynamic>> rewards = [
      {
        "promotionId": "promo_001",
        "title_vi": "Gi·∫£m 20% g√≥i t·∫≠p Gym 3 th√°ng",
        "title_en": "20% off 3-month Gym package",
        "points": "500 ƒëi·ªÉm",
        "point": 500, // D·ªØ li·ªáu ·∫©n
        "imageUrl": "https://images.pexels.com/photos/841130/pexels-photo-841130.jpeg",
      },
      {
        "promotionId": "promo_002",
        "title_vi": "1 tu·∫ßn t·∫≠p th·ª≠ Yoga mi·ªÖn ph√≠",
        "title_en": "1 week free Yoga trial",
        "points": "1000 ƒëi·ªÉm",
        "point": 1000, // D·ªØ li·ªáu ·∫©n
        "imageUrl": "https://images.pexels.com/photos/4167544/pexels-photo-4167544.jpeg",
      },
      {
        "promotionId": "promo_001",
        "title_vi": "Gi·∫£m 20% g√≥i t·∫≠p Gym 3 th√°ng",
        "title_en": "20% off 3-month Gym package",
        "points": "1500 ƒëi·ªÉm",
        "point": 1500, // D·ªØ li·ªáu ·∫©n
        "imageUrl": "https://images.pexels.com/photos/2261477/pexels-photo-2261477.jpeg",
      },
      {
        "promotionId": "promo_002",
        "title_vi": "1 tu·∫ßn t·∫≠p th·ª≠ Yoga mi·ªÖn ph√≠",
        "title_en": "1 week free Yoga trial",
        "points": "2000 ƒëi·ªÉm",
        "point": 2000, // D·ªØ li·ªáu ·∫©n
        "imageUrl": "https://images.pexels.com/photos/3253501/pexels-photo-3253501.jpeg",
      },
      {
        "promotionId": "promo_001",
        "title_vi": "Gi·∫£m 20% g√≥i t·∫≠p Gym 3 th√°ng",
        "title_en": "20% off 3-month Gym package",
        "points": "2500 ƒëi·ªÉm",
        "point": 2500, // D·ªØ li·ªáu ·∫©n
        "imageUrl": "https://images.pexels.com/photos/1954524/pexels-photo-1954524.jpeg",
      },
      {
        "promotionId": "promo_002",
        "title_vi": "1 tu·∫ßn t·∫≠p th·ª≠ Yoga mi·ªÖn ph√≠",
        "title_en": "1 week free Yoga trial",
        "points": "3000 ƒëi·ªÉm",
        "point": 3000, // D·ªØ li·ªáu ·∫©n
        "imageUrl": "https://images.pexels.com/photos/1552252/pexels-photo-1552252.jpeg",
      },
    ];

    Widget _buildRewardList(bool isVietnamese) {
      return Column(
        children: rewards.map((reward) {
          return _buildRewardItem(
            reward["promotionId"], // Truy·ªÅn promotionId
            isVietnamese ? reward["title_vi"] : reward["title_en"],
            reward["points"],
            reward["imageUrl"],
            reward["point"], // Truy·ªÅn point
          );
        }).toList(),
      );
    }


    Widget _buildRewardItem(String promotionId, String title, String points, String imageUrl, int point) {
      return GestureDetector(
        onTap: () {
          _navigateToDetailPage(promotionId, title, points, imageUrl, point);
        },
        child: Card(
          elevation: 3,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          child: Padding(
            padding: const EdgeInsets.all(10.0),
            child: Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: CachedNetworkImage(
                    imageUrl: imageUrl,
                    width: 80,
                    height: 80,
                    fit: BoxFit.cover,
                  ),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(title, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 5),
                      Text(points, style: const TextStyle(fontSize: 14, color: Colors.redAccent)),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }


  void _showRedeemDialog(String rewardName, int pointsRequired) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("X√°c nh·∫≠n ƒë·ªïi qu√†"),
          content: Text("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi \"$rewardName\" v·ªõi $pointsRequired ƒëi·ªÉm kh√¥ng?"),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text("H·ªßy"),
            ),
            TextButton(
              onPressed: () {
                // G·ª≠i y√™u c·∫ßu ƒë·ªïi qu√† t·∫°i ƒë√¢y
                _redeemReward(rewardName, pointsRequired);
                Navigator.pop(context);
              },
              child: Text("ƒê·ªïi qu√†"),
            ),
          ],
        );
      },
    );
  }
  void _redeemReward(String rewardName, int pointsRequired) {
    // Gi·∫£ l·∫≠p x·ª≠ l√Ω ƒë·ªïi qu√†
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("B·∫°n ƒë√£ ƒë·ªïi th√†nh c√¥ng $rewardName!")),
    );

    // TODO: G·ª≠i request l√™n server ƒë·ªÉ tr·ª´ ƒëi·ªÉm v√† x√°c nh·∫≠n ƒë·ªïi qu√†
  }


  Widget _buildYourCouponsTab() {
    final promotionService = Provider.of<PromotionService>(context);

    if (promotionService.isLoading) {
      return Center(child: CircularProgressIndicator());
    }

    final availablePromotions = promotionService.promotionOfUsers;

    if (availablePromotions.isEmpty) {
      return Center(
        child: Text(
          "You have no available coupons at the moment.",
          style: TextStyle(color: Colors.red, fontSize: 16),
        ),
      );
    }
    return ListView.builder(
      padding: EdgeInsets.all(16),
      itemCount: availablePromotions.length,
      itemBuilder: (context, index) {
        final promo = availablePromotions[index];

        return Card(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          elevation: 5,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header: Code + View Terms Button
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Code: ${promo.code}",
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    TextButton(
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (context) {
                            return AlertDialog(
                              title: Text("Terms and Conditions"),
                              content: SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    _buildTermsText("Minimum purchase value", promo.minValue.toString()),
                                    _buildTermsText("Discount type", promo.discountValue.toString()),
                                    _buildTermsText("Supported packages", promo.packageName.join(", ")),
                                    _buildTermsText("Promotion description", promo.description),
                                    _buildTermsText("Applicable services", promo.applicableService.join(", ")),
                                    _buildTermsText("Customer type", promo.customerType.join(", ")),
                                  ],
                                ),
                              ),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.pop(context),
                                  child: Text("Close"),
                                ),
                              ],
                            );
                          },
                        );
                      },
                      child: Text("View Terms", style: TextStyle(color: Colors.blue)),
                    ),
                  ],
                ),
                SizedBox(height: 8),

                // Discount Amount
                Text(
                  "Discount Amount: ${promo.promotionAmount}",
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                ),
                SizedBox(height: 8),

                // Date Information
                Text(
                  "Valid From: ${promo.startDate}",
                  style: TextStyle(fontSize: 14, color: Colors.grey),
                ),
                Text(
                  "Expires On: ${promo.endDate}",
                  style: TextStyle(fontSize: 14, color: Colors.grey),
                ),
              ],
            ),
          ),
        );
      },
    );

  }
  // H√†m h·ªó tr·ª£ hi·ªÉn th·ªã d√≤ng n·ªôi dung ƒëi·ªÅu kho·∫£n
  Widget _buildTermsText(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: RichText(
        text: TextSpan(
          style: TextStyle(fontSize: 16, color: Colors.black),
          children: [
            TextSpan(text: "$label: ", style: TextStyle(fontWeight: FontWeight.bold)),
            TextSpan(text: value),
          ],
        ),
      ),
    );
  }


  Widget _buildRedeemPointsTab(String tabName) {
    final userInfo = Provider.of<UserInfoProvider>(context, listen: false);
    int? userId = userInfo.userId;
    int currentPoint = userInfo.userPoint;
    if (tabName == "Redeem Points") {
      return Consumer<PromotionService>(
        builder: (context, promotionService, child) {
          if (promotionService.isLoading) {
            return Center(child: CircularProgressIndicator());
          }

          final promotionList = promotionService.promotionPoints;

          if (promotionList.isEmpty) {
            return Center(
              child: Text(
                "No redeemable promotions available.",
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.red),
              ),
            );
          }

          return ListView.builder(
            padding: EdgeInsets.all(16),
            itemCount: promotionList.length,
            itemBuilder: (context, index) {
              final promo = promotionList[index];

              return Card(
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                elevation: 10,
                color: Colors.white,
                shadowColor: Colors.black.withOpacity(0.1),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Title and Discount Type
                      Row(
                        children: [
                          Icon(Icons.local_offer, color: Color(0xFFB00020)),
                          SizedBox(width: 10),
                          Text(
                            promo.title,
                            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.black),
                          ),
                        ],
                      ),
                      SizedBox(height: 10),

                      // Description and discount info
                      Text(
                        promo.description,
                        style: TextStyle(fontSize: 16, color: Colors.black.withOpacity(0.7)),
                      ),
                      SizedBox(height: 10),

                      // Discount and Minimum Purchase
                      _buildInfoRow("Discount Value", "${promo.discountValue} ƒë", color: Color(0xFFB00020)),
                      _buildInfoRow("Min Purchase", "${promo.minValue} ƒë", color: Colors.green),

                      // Customer Type and Applicable Services
                      _buildInfoRow("Customer Type", promo.customerType.join(", "), color: Colors.blue),
                      _buildInfoRow("Applicable Services", promo.applicableService.join(", "), color: Colors.orange),

                      // Promo Code and Points
                      // _buildInfoRow("Promo Code", promo.code, color: Colors.purple),
                      // _buildInfoRow("Promo Id", promo.id, color: Colors.purple),
                      _buildInfoRow("Required Points", "${promo.points} points", color: Colors.red),

                      // Redeem Button
                      SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: () async {
                          // L·∫•y m√£ gi·∫£m gi√° t·ª´ ƒë·ªëi t∆∞·ª£ng promo
                          final promoId = promo.id;
                          final promoPoint = promo.points;

                          // In m√£ gi·∫£m gi√° ra console (ho·∫∑c c√≥ th·ªÉ l√†m g√¨ ƒë√≥ kh√°c)
                          print("Promo Code khi click: $promoId");
                          print("Promo point khi click: $promoPoint");
                          print("UserId khi click: $userId");

                          // Ki·ªÉm tra n·∫øu ƒëi·ªÉm hi·ªán t·∫°i kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·ªïi m√£
                          if (currentPoint < promoPoint) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text("B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi m√£ gi·∫£m gi√°.")),
                            );
                            return; // Kh√¥ng th·ª±c hi·ªán ti·∫øp
                          }

                          // G·ªçi h√†m changeCode ƒë·ªÉ th·ª±c hi·ªán ƒë·ªïi m√£
                          bool success = await promotionService.changeCode(userId!, promoPoint, promoId);

                          // Ki·ªÉm tra k·∫øt qu·∫£ v√† th√¥ng b√°o cho ng∆∞·ªùi d√πng
                          if (success) {
                            userInfo.setUserPoint(currentPoint - promoPoint);
                            WidgetsBinding.instance.addPostFrameCallback((_) {
                              fetchUserPromotions();
                            });// C·∫≠p nh·∫≠t ƒëi·ªÉm sau khi ƒë·ªïi m√£
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text("ƒê·ªïi m√£ gi·∫£m gi√° th√†nh c√¥ng!")),
                            );
                          } else {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text("ƒê√£ x·∫£y ra l·ªói khi ƒë·ªïi m√£ gi·∫£m gi√°.")),
                            );
                          }
                        },
                        child: Text("Redeem Now"),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Color(0xFFB00020), // Red color
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 14),
                          textStyle: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                        ),
                      ),

                    ],
                  ),
                ),
              );
            },
          );
        },
      );
    } else {
      return Center(
        child: Text(
          "Danh m·ª•c $tabName ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
      );
    }
  }

// Widget hi·ªÉn th·ªã t·ª´ng d√≤ng th√¥ng tin, c√≥ th·ªÉ thay ƒë·ªïi m√†u s·∫Øc
  Widget _buildInfoRow(String label, String value, {Color color = Colors.black}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: RichText(
        text: TextSpan(
          style: TextStyle(fontSize: 16, color: color),
          children: [
            TextSpan(text: "$label: ", style: TextStyle(fontWeight: FontWeight.bold)),
            TextSpan(text: value),
          ],
        ),
      ),
    );
  }


}
