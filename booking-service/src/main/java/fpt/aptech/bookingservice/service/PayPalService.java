package fpt.aptech.bookingservice.service;

import com.paypal.api.payments.*;
import com.paypal.base.rest.APIContext;
import com.paypal.base.rest.PayPalRESTException;
import fpt.aptech.bookingservice.dtos.MembershipSubscriptionDTO;
import fpt.aptech.bookingservice.dtos.UserDTO;
import fpt.aptech.bookingservice.eureka_client.UserEurekaClient;
import fpt.aptech.bookingservice.models.MembershipSubscription;
import fpt.aptech.bookingservice.models.PayMethodType;
import fpt.aptech.bookingservice.models.PayStatusType;
import fpt.aptech.bookingservice.models.WorkoutPackage;
import fpt.aptech.bookingservice.repository.MembershipSubscriptionRepository;
import fpt.aptech.bookingservice.repository.WorkoutPackageRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class PayPalService {
    private final APIContext apiContext;
    private final UserEurekaClient userEurekaClient;
    private final WorkoutPackageRepository workoutPackageRepository;
    private final MembershipSubscriptionRepository membershipRepository;

    /**
     * T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Payment m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu quy tr√¨nh thanh to√°n v·ªõi PayPal.
     * <p>
     * total S·ªë ti·ªÅn thanh to√°n
     * currency ƒê∆°n v·ªã ti·ªÅn t·ªá
     * method Ph∆∞∆°ng th·ª©c thanh to√°n
     * intent M·ª•c ƒë√≠ch c·ªßa thanh to√°n (e.g., sale, authorize)
     * description M√¥ t·∫£ v·ªÅ giao d·ªãch
     * cancelUrl URL ƒë·ªÉ chuy·ªÉn h∆∞·ªõng khi thanh to√°n b·ªã h·ªßy
     * successUrl URL ƒë·ªÉ chuy·ªÉn h∆∞·ªõng khi thanh to√°n th√†nh c√¥ng
     *
     * @return ƒê·ªëi t∆∞·ª£ng Payment ƒë√£ ƒë∆∞·ª£c t·∫°o
     * @throws PayPalRESTException N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t∆∞∆°ng t√°c v·ªõi PayPal
     */

    public ResponseEntity<?> createPayment(@RequestBody MembershipSubscriptionDTO subscriptionDTO) {
        try {
            System.out.println("‚úÖ Nh·∫≠n ƒë∆∞·ª£c request t·ª´ Flutter: " + subscriptionDTO);
            System.out.println("üì• Gi√° tr·ªã TotalAmount nh·∫≠n t·ª´ Frontend: " + subscriptionDTO.getTotalAmount());

            // Ki·ªÉm tra userId c√≥ t·ªìn t·∫°i kh√¥ng
            UserDTO userExisting = userEurekaClient.getUserById(subscriptionDTO.getUserId());
            if (userExisting == null) {
                System.out.println("‚ùå User kh√¥ng t·ªìn t·∫°i!");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "User not found"));
            }

            // L·∫•y g√≥i t·∫≠p theo ID
            WorkoutPackage packageExisting = workoutPackageRepository.findById(subscriptionDTO.getPackageId())
                    .orElseThrow(() -> new RuntimeException("Workout package not found"));

            Double totalAmount = subscriptionDTO.getTotalAmount(); // ‚úÖ L·∫•y t·ª´ transactions.amount.total
            double finalAmount = (totalAmount != null && totalAmount > 0) ? totalAmount : packageExisting.getPrice();


            System.out.println("‚úÖ Final Amount g·ª≠i ƒë·∫øn PayPal: " + finalAmount);

            Amount amount = new Amount();
            amount.setCurrency(subscriptionDTO.getCurrency());
            amount.setTotal(String.format("%.2f", finalAmount));

            Transaction transaction = new Transaction();
            transaction.setDescription(subscriptionDTO.getDescription());
            transaction.setAmount(amount);

            List<Transaction> transactions = new ArrayList<>();
            transactions.add(transaction);

            Payer payer = new Payer();
            payer.setPaymentMethod(PayMethodType.PAYPAL.toString());

            Payment payment = new Payment();
            payment.setIntent(subscriptionDTO.getIntent());
            payment.setPayer(payer);
            payment.setTransactions(transactions);

            RedirectUrls redirectUrls = new RedirectUrls();
            redirectUrls.setCancelUrl(subscriptionDTO.getCancelUrl());
            redirectUrls.setReturnUrl(subscriptionDTO.getSuccessUrl());
            payment.setRedirectUrls(redirectUrls);

            System.out.println("‚úÖ G·ª≠i y√™u c·∫ßu t·∫°o thanh to√°n ƒë·∫øn PayPal...");
            System.out.println("üì§ D·ªØ li·ªáu g·ª≠i l√™n PayPal: " + payment.toJSON());

            Payment createdPayment = payment.create(apiContext);

            if (createdPayment == null) {
                System.out.println("‚ùå PayPal kh√¥ng tr·∫£ v·ªÅ ph·∫£n h·ªìi!");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", "PayPal payment creation failed"));
            }

            System.out.println("‚úÖ PayPal ƒë√£ t·∫°o thanh to√°n th√†nh c√¥ng: " + createdPayment.getId());

            // ‚úÖ T√¨m URL ph√™ duy·ªát t·ª´ danh s√°ch links c·ªßa PayPal
            String approvalUrl = null;
            for (Links link : createdPayment.getLinks()) {
                if ("approval_url".equals(link.getRel())) {
                    approvalUrl = link.getHref();
                    break;
                }
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y URL, tr·∫£ v·ªÅ l·ªói
            if (approvalUrl == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y approval URL!");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(Map.of("error", "Kh√¥ng t√¨m th·∫•y approval URL t·ª´ PayPal"));
            }

            // L∆∞u v√†o database
            MembershipSubscription membershipSubscription = MembershipSubscription.builder()
                    .packageId(subscriptionDTO.getPackageId())
                    .userId(subscriptionDTO.getUserId())
                    .fullName(userExisting.getFullName())
                    .buyDate(LocalDateTime.now())
                    .startDate(LocalDateTime.now().toLocalDate())
                    .endDate(LocalDateTime.now().plusMonths(packageExisting.getDurationMonth()).toLocalDate())
                    .payMethodType(PayMethodType.PAYPAL)
                    .payStatusType(PayStatusType.PENDING)
                    .packageName(packageExisting.getPackageName())
                    .description(subscriptionDTO.getDescription())
                    .totalAmount(finalAmount)
                    .paymentId(createdPayment.getId())
                    .build();

            membershipRepository.save(membershipSubscription);

            // ‚úÖ ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ ph·∫£n h·ªìi cho Flutter
            return ResponseEntity.ok(Map.of("approvalUrl", approvalUrl));
        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi x·ª≠ l√Ω thanh to√°n: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", e.getMessage()));
        }
    }


    /**
     * Th·ª±c hi·ªán thanh to√°n sau khi ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n tr√™n PayPal.
     * <p>
     * paymentId ID c·ªßa giao d·ªãch thanh to√°n
     * payerId ID c·ªßa ng∆∞·ªùi thanh to√°n
     *
     * @return ƒê·ªëi t∆∞·ª£ng Payment ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán
     * @throws PayPalRESTException N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t∆∞∆°ng t√°c v·ªõi PayPal
     */
    public Payment executePayment(String paymentId, String payerId) throws PayPalRESTException {

        // T·∫°o ƒë·ªëi t∆∞·ª£ng Payment v·ªõi ID thanh to√°n
        Payment payment = new Payment();
        payment.setId(paymentId);
        // T·∫°o ƒë·ªëi t∆∞·ª£ng PaymentExecution v√† thi·∫øt l·∫≠p ID ng∆∞·ªùi thanh to√°n
        PaymentExecution paymentExecution = new PaymentExecution();
        paymentExecution.setPayerId(payerId);
        // Th·ª±c hi·ªán thanh to√°n tr√™n PayPal
        Payment executedPayment = payment.execute(apiContext, paymentExecution);
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n sau khi th·ª±c hi·ªán
        MembershipSubscription paymentMembership = membershipRepository.findByPaymentId(paymentId);
        if (paymentMembership != null) {
            paymentMembership.setPayerId(payerId);
            paymentMembership.setPayStatusType(PayStatusType.valueOf(PayStatusType.COMPLETED.toString()));
            // C·∫≠p nh·∫≠t g√≥i t·∫≠p (packageId) cho user
            userEurekaClient.assignWorkoutPackage(paymentMembership.getUserId(), paymentMembership.getPackageId());
            membershipRepository.save(paymentMembership);
        }
        return executedPayment;
    }

    public MembershipSubscription getMembershippaymentId(String paymentId) {
        return membershipRepository.findByPaymentId(paymentId);
    }

    public MembershipSubscription getMembershipByUserId(long userId)  {
         var userExisting = membershipRepository.findMemberShipByUserId(userId);
         if (userExisting != null) {
             return membershipRepository.findMemberShipByUserId(userId);
         }
         else {
             throw new RuntimeException("Membership with userId " + userId + " not found");
         }
    }

}
